/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VideoDetails } from "./VideoDetails";
import { VideoDetailsCountArgs } from "./VideoDetailsCountArgs";
import { VideoDetailsFindManyArgs } from "./VideoDetailsFindManyArgs";
import { VideoDetailsFindUniqueArgs } from "./VideoDetailsFindUniqueArgs";
import { CreateVideoDetailsArgs } from "./CreateVideoDetailsArgs";
import { UpdateVideoDetailsArgs } from "./UpdateVideoDetailsArgs";
import { DeleteVideoDetailsArgs } from "./DeleteVideoDetailsArgs";
import { Video } from "../../video/base/Video";
import { VideoDetailsService } from "../videoDetails.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VideoDetails)
export class VideoDetailsResolverBase {
  constructor(
    protected readonly service: VideoDetailsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VideoDetails",
    action: "read",
    possession: "any",
  })
  async _videoDetailsItemsMeta(
    @graphql.Args() args: VideoDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VideoDetails])
  @nestAccessControl.UseRoles({
    resource: "VideoDetails",
    action: "read",
    possession: "any",
  })
  async videoDetailsItems(
    @graphql.Args() args: VideoDetailsFindManyArgs
  ): Promise<VideoDetails[]> {
    return this.service.videoDetailsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VideoDetails, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VideoDetails",
    action: "read",
    possession: "own",
  })
  async videoDetails(
    @graphql.Args() args: VideoDetailsFindUniqueArgs
  ): Promise<VideoDetails | null> {
    const result = await this.service.videoDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VideoDetails)
  @nestAccessControl.UseRoles({
    resource: "VideoDetails",
    action: "create",
    possession: "any",
  })
  async createVideoDetails(
    @graphql.Args() args: CreateVideoDetailsArgs
  ): Promise<VideoDetails> {
    return await this.service.createVideoDetails({
      ...args,
      data: {
        ...args.data,

        video: args.data.video
          ? {
              connect: args.data.video,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VideoDetails)
  @nestAccessControl.UseRoles({
    resource: "VideoDetails",
    action: "update",
    possession: "any",
  })
  async updateVideoDetails(
    @graphql.Args() args: UpdateVideoDetailsArgs
  ): Promise<VideoDetails | null> {
    try {
      return await this.service.updateVideoDetails({
        ...args,
        data: {
          ...args.data,

          video: args.data.video
            ? {
                connect: args.data.video,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VideoDetails)
  @nestAccessControl.UseRoles({
    resource: "VideoDetails",
    action: "delete",
    possession: "any",
  })
  async deleteVideoDetails(
    @graphql.Args() args: DeleteVideoDetailsArgs
  ): Promise<VideoDetails | null> {
    try {
      return await this.service.deleteVideoDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Video, {
    nullable: true,
    name: "video",
  })
  @nestAccessControl.UseRoles({
    resource: "Video",
    action: "read",
    possession: "any",
  })
  async getVideo(
    @graphql.Parent() parent: VideoDetails
  ): Promise<Video | null> {
    const result = await this.service.getVideo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
